https://codevkr.tistory.com/62?category=719250

1. 개발환경 준비
node.js / vscode

2. 필요 모듈 설치
npm init // package.json
npm install express --save // express
npm install socket.io --save // socket.io

3. 모듈 불러오기
require를 이용하여 모듈을 불러올 수 있습니다.
마지막에 listen 메소드를 통해 원하는 포트번호롤 서버를 실행할 수 있습니다.
listen(포트, 리스너) // 지정한 포트로 서버를 실행하고 실행이 되면 리스너가 호출
리스너에 함수를 전달해주면 됩니다.

4. Express 객체 생성

5. 서버 실행
node 실행파일.js

6.Get 방식으로 경로에 접속하면 실행
get('/',...)는 서버의 / 경로를 Get 방식으로 접속하면 호출됩니다. (라우트기능인가보다)
get(겅로, 함수)
함수는 request와 response 객체를 받습니다.
request는 클라이언트에서 전달된 데이터와 정보들이 담겨있습니다.
response에는 클라이언트에게 응답을 위한 정보가 들어있습니다.

response.send(전달 데이터) //전달할 데이터를 send()를 통해 전달하면 다시 클라이언트(웹)으로 서버가 데이터를 돌려줍니다.


////////////////////////////////////////////////////////
//////socket.io를 이용한 실시간 데이터 송/수신////////////
////////////////////////////////////////////////////////
                      [목차]
1. 서버 코드 작성
2. HTML 수정
3. 클라이언트 자바스크립트 생성
4. 클라이언트 코드 작성
5. 테스트



////////////////////////////////////////////////////////
///////////////////채팅기능 구현/////////////////////////
////////////////////////////////////////////////////////
                      [목차]
1. 채팅 기능 설계
2. 서버 코드 작성
3. 클라이언트 코드 작성
4. 테스트

* 사용할 이벤트 명
- message : 클라이언트가 서버로 메시지 전송
- update :  서버에서 받은 메시지 다른 클라이언트에게 전송(메시지 또는 정보)
- connectUser : 새로운 유저 접속을 서버에게 알림
접속 종료부분은 update로 통일하여 클라이언트에게 전달할 예정

* 클라이언트와 서버에서 주고받는 메시지(알림)의 형식
- type : 메시지 유형(서버의 알림, 유저 메시지)  // message(기본 메시지), connect(접속 알림), disconnect(채팅 종료 알림)
- message : 전달된 메시지 데이터
- name : 메시지를 전달한 유저 이름(또는 서버) 


